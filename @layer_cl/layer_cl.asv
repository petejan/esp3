
classdef layer_cl < handle
    properties
        ID_num=0;
        Filename='';
        Filetype='';
        PathToFile='';
        Transceivers
        Frequencies
        GPSData
        EnvData
    end
    
    
    methods
        function obj = layer_cl(varargin)
            p = inputParser;
            
            
            check_gps_class=@(gps_data_obj) isa(gps_data_obj,'gps_data_cl');
            check_env_class=@(env_data_obj) isa(env_data_obj,'env_data_cl');
            check_transceiver_class=@(transceiver_obj) isa(transceiver_obj,'transceiver_cl')|isempty(transceiver_obj);
            
            addParameter(p,'ID_num',0,@isnumeric);
            addParameter(p,'Filename','Dummy Data',@(fname)(ischar(fname)||iscell(fname)));
            addParameter(p,'Filetype','EK60',@(ftype)(ischar(ftype)));
            addParameter(p,'PathToFile',pwd,@(fname)(ischar(fname)||iscell(fname)));
            addParameter(p,'Transceivers',[],check_transceiver_class);
            addParameter(p,'Frequencies',38000,@isnumeric);
            addParameter(p,'GPSData',gps_data_cl(),check_gps_class);
            addParameter(p,'EnvData',env_data_cl(),check_env_class);
            
            parse(p,varargin{:});
            
            
            results=p.Results;
            props=fieldnames(results);
			 
            for i=1:length(props)
                
                obj.(props{i})=results.(props{i});
                
            end
            
			if isempty(p.Results.Transceivers)
				obj.Transceivers=transceiver_cl();
			end
        end
        
        function layer_out=concatenate_Layer(layer_1,layer_2)
            if iscell(layer_1.Filename)||iscell(layer_2.Filename)
                newname=[layer_1.Filename layer_2.Filename];
            else
                newname={layer_1.Filename layer_2.Filename};
            end
            layer_out=layer_cl('ID_num',layer_1.ID_num,...
                'Filename',newname...
                ,'Filetype',layer_1.Filetype,...
                'PathToFile',layer_1.PathToFile,...
                'Transceivers',concatenate_Transceivers(layer_1.Transceivers,layer_2.Transceivers),...
                'GPSData',concatenate_GPSData(layer_1.GPSData,layer_2.GPSData),...
                'Frequencies',layer_1.Frequencies);
            
        end
        
        function copy_region_across(idx_freq,active_reg);
    
    range_ori=Transceiver.Data.Range;
    time_ori=Transceiver.Data.Time;
    
    dr_ori=nanmean(diff(range_ori));
    dt_ori=nanmean(diff(time_ori));
    
    sv_reg_ori=active_reg.Sv_reg;
    mask_reg_ori=~isnan(sv_reg_ori);
    [nb_samples_ori,nb_pings_ori]=size(sv_reg_ori);
    [S_ori,P_ori]=meshgrid(1:nb_samples_ori,1:nb_pings_ori);
    
    
    for i=1:length(layer.Transceivers)
        if i==idx_freq
            continue;
        end
        Transceiver_2=layer.Transceivers(i);
        new_range=Transceiver_2.Data.Range;
        new_time=Transceiver_2.Data.Time;
        Sv=layer.Transceivers(i).Data.get_datamat('sv');
        
        dr=nanmean(diff(new_range));
        dt=nanmean(diff(new_time));
        
        [~,idx_ping_start]=nanmin(abs(new_time-time_ori(active_reg.Idx_pings(1))));
        [~,sample_start]=nanmin(abs(new_range-range_ori(active_reg.Idx_r(1))));
        [~,idx_ping_end]=nanmin(abs(new_time-time_ori(active_reg.Idx_pings(end))));
        [~,sample_end]=nanmin(abs(new_range-range_ori(active_reg.Idx_r(end))));
  
        idx_pings=idx_ping_start:idx_ping_end;
        idx_r=sample_start:sample_end;
        
        switch active_reg.Cell_w_unit
            case 'pings'
                cell_w=ceil(active_reg.Cell_w*dt_ori/dt);
            case 'meters'
                cell_w=active_reg.Cell_w;
        end
        
        switch active_reg.Cell_h_unit
            case 'samples'
                cell_h=ceil(active_reg.Cell_h*dr_ori/dr);
            case 'meters'
                cell_h=active_reg.Cell_h;
                
        end
        
        switch active_reg.Shape
            case 'Polygon'
                [nb_samples,nb_pings]=size(Sv(idx_r,idx_pings));
                [S,P]=meshgrid(1:nb_samples,1:nb_pings);
                F=scatteredInterpolant(S_ori(:),P_ori(:),double(mask_reg_ori(:)),'nearest','nearest');
                new_mask=F(S,P);
                sv_reg=Sv(idx_r,idx_pings);
                sv_reg(new_mask<1)=nan;
                
            otherwise
                sv_reg=Sv(idx_r,idx_pings);
        end

        reg_temp=region_cl(...
            'ID',new_id(layer.Transceivers(i),active_reg.Name),...
            'Unique_ID',active_reg.Unique_ID,...
            'Name',active_reg.Name,...
            'Type',active_reg.Type,...
            'Idx_pings',idx_pings,...
            'Idx_r',idx_r,...
            'Shape',active_reg.Shape,...
            'Sv_reg',sv_reg,...
            'Reference','Surface',...
            'Cell_w',cell_w,...
            'Cell_w_unit',active_reg.Cell_w_unit,...
            'Cell_h',cell_h,...
            'Cell_h_unit',active_reg.Cell_h_unit,...
            'Output',[]);
        
            reg_temp.integrate_region(layer.Transceivers(i));
            
            layer.Transceivers(i).add_region(reg_temp);
    end
    
    end
end


